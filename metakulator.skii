#!./stackulator -s

#----------- Fonctions pour lire un élément arbitraire sur le stack -----------#

# Envoie l'élément du top tout en bas
:A =a . ' a ' ;
# Répète A [stack_top] fois
:B [ 1 - =b . A b ] . ;
# Remet en ordre après un appel à B
:C =c . ' c B ' ;
# Copie le -nième élément du stack sur le top
:D =d B =e d C e ;
# Écrit sur le -nième élément du stack la valeur du top (le top est consommé)
:E =d . =e . d B . e d C ;
#------------------------------------------------------------------------------#


#------------------- Variables ------------------------------------------------#
0 =p # variable en cours d'input
0 =s # taille du stack
~
#------------------------------------------------------------------------------#

0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 # Variables du metakulator

"-- Metakulator v1.0 --
Entrez Ctrl+A suivi de [enter] pour quitter
> "
1 [ . ` =i .

    # Si un nombre est entré
    i 47 > i 58 < & [ .
        # Si on est en train de construire un nombre
        p !! [ .
            { i 48 - +
        0 ] .
        # Si on est pas en train d'en construire un, on en crée un nouveau
        p ! [ .
            0 i 48 - +
            s 1 + =s .
            p ! =p .
        0 ] .
    0 ] .

    # Si une addition est entrée et qu'il y a assez d'éléments sur le stack
    i 43 == s 1 > & [ .
        +
        s 1 - =s .
    0 ] .

    # Si une soustraction est entrée et qu'il y a assez d'éléments sur le stack
    i 45 == s 1 > & [ .
        -
        s 1 - =s .
    0 ] .

    # Si une multiplication est entrée et qu'il y a assez d'éléments sur le stack
    i 42 == s 1 > & [ .
        *
        s 1 - =s .
    0 ] .

    # Si une variable est entrée, on push sa valeur sur le stack
    i 96 > i 123 < & [ .
        i 97 - s + D
        s 1 + =s .
    0 ] .

    # Si on lit '=', on lit le nom de variable qui suit et on stock le résultat
    i 61 == [ .
        ` 97 - =i .
        i 0 1 - > i 27 < & [ .
            @ i s + E
        0 ] .
        61 =i . # On ne veut pas sortir de la loop principale
    0 ] .

    # Si on lit '\n', on affiche le top du stack puis le symbole du prompt
    i 10 == [ .
        ^
        "
"
        "> "
    0 ] .

    # Fin de la saisie d'un nombre
    i 48 < i 57 > | [ .
        p ! =p .
    0 ] .
i 1 == ! ] .

^ "
"
